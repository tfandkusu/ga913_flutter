// Mocks generated by Mockito 5.4.4 from annotations
// in ga913_flutter/test/screen/detail/detail_event_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:ga913_flutter/data/repository/landmark_list_notifier.dart'
    as _i3;
import 'package:ga913_flutter/model/landmark.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LandmarkListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockLandmarkListNotifier extends _i1.Mock
    implements _i3.LandmarkListNotifier {
  MockLandmarkListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeNotifierProviderRef<List<_i4.Landmark>> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAutoDisposeNotifierProviderRef_0<List<_i4.Landmark>>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeNotifierProviderRef<List<_i4.Landmark>>);

  @override
  List<_i4.Landmark> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i4.Landmark>[],
      ) as List<_i4.Landmark>);

  @override
  set state(List<_i4.Landmark>? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.Landmark> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: <_i4.Landmark>[],
      ) as List<_i4.Landmark>);

  @override
  void setLandmarkList(List<_i4.Landmark>? landmarkList) => super.noSuchMethod(
        Invocation.method(
          #setLandmarkList,
          [landmarkList],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setFavorite(
    int? id,
    bool? isFavorite,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setFavorite,
          [
            id,
            isFavorite,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      List<_i4.Landmark>?,
      List<_i4.Landmark>,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    List<_i4.Landmark>? previous,
    List<_i4.Landmark>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
