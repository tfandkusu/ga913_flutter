{
  "UiModel Template": {
    "prefix": "uimodel",
    "body": [
      "import 'package:freezed_annotation/freezed_annotation.dart';",
      "",
      "part '${1:name}_ui_model.freezed.dart';",
      "",
      "@freezed",
      "class ${2:Name}UiModel with _\\$${2:Name}UiModel {",
      "  const factory ${2:Name}UiModel({",
      "    required bool progress,",
      "  }) = _${2:Name}UiModel;",
      "}"
    ]
  },
  "UiModelNotifier Template": {
    "prefix": "uimodelnotifier",
    "body": [
      "import 'package:riverpod_annotation/riverpod_annotation.dart';",
      "",
      "part '${1:name}_ui_model_notifier.g.dart';",
      "",
      "@riverpod",
      "class ${2:Name}UiModelNotifier extends _\\$${2:Name}UiModelNotifier {",
      "  @override",
      "  ${2:Name}UiModel build() => const ${2:Name}UiModel(",
      "    progress: true,",
      "  );",
      "",
      "  void setProgress(bool progress) {",
      "    state = state.copyWith(progress: progress);",
      "  }",
      "}"
    ]
  },
  "EventHandler Template": {
    "prefix": "eventhandler",
    "body": [
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "import 'package:riverpod_annotation/riverpod_annotation.dart';",
      "",
      "part '${1:name}_event_handler.g.dart';",
      "",
      "class ${2:Name}EventHandler {",
      "  final ${2:Name}UiModelNotifier _uiModelNotifier;",
      "",
      "  ${2:Name}EventHandler(this._uiModelNotifier);",
      "",
      "  Future<void> onCreate() async {",
      "    _uiModelNotifier.setProgress(false);",
      "  }",
      "",
      "}",
      "",
      "@riverpod",
      "${2:Name}EventHandler ${1:name}EventHandler(Ref ref) => ${2:Name}EventHandler(",
      "  ref.read(${1:name}UiModelNotifierProvider.notifier),",
      ");"
    ]
  },
  "UiModelProvider Template": {
    "prefix": "uimodelprovider",
    "body": [
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "import 'package:riverpod_annotation/riverpod_annotation.dart';",
      "",
      "part '${1:name}_ui_model_provider.g.dart';",
      "",
      "@riverpod",
      "${2:Name}UiModel ${1:name}UiModel(Ref ref) {",
      "  final uiModel = ref.watch(${1:name}UiModelNotifierProvider);",
      "  return uiModel;",
      "}"
    ]
  },
  "Screen Template": {
    "prefix": "screen",
    "body": [
      "import 'package:auto_route/auto_route.dart';",
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_hooks/flutter_hooks.dart';",
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "",
      "@RoutePage()",
      "class ${1:Name}Screen extends HookConsumerWidget {",
      "  const ${1:Name}Screen({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    final uiModel = ref.watch(${2:name}UiModelProvider);",
      "    final eventHandler = ref.read(${2:name}EventHandlerProvider);",
      "",
      "    useEffect(() {",
      "      eventHandler.onCreate();",
      "      return null;",
      "    }, []);",
      "",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${1:Name}'),",
      "      ),",
      "      body: Container(),",
      "    );",
      "  }",
      "}"
    ]
  },
  "UiModelNotifierTest Template": {
    "prefix": "uimodelnotifier-test",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "",
      "void main() {",
      "  group('${1:Name}UiModelNotifier', () {",
      "    late ProviderContainer container;",
      "    late ${1:Name}UiModelNotifier notifier;",
      "",
      "    setUp(() {",
      "      container = ProviderContainer();",
      "      notifier = container.read(${2:name}UiModelNotifierProvider.notifier);",
      "    });",
      "",
      "    tearDown(() {",
      "      container.dispose();",
      "    });",
      "",
      "    test('初期状態の確認', () {",
      "      final state = container.read(${2:name}UiModelNotifierProvider);",
      "      expect(",
      "        state,",
      "        const ${1:Name}UiModel(",
      "          progress: true,",
      "          // 他の初期値を追加",
      "        )",
      "      );",
      "    });",
      "",
      "    test('状態変更のテスト', () {",
      "      notifier.setProgress(false);",
      "      final uiModel = container.read(${2:name}UiModelNotifierProvider);",
      "      expect(",
      "        uiModel.progress,",
      "        false",
      "      );",
      "    });",
      "  });",
      "}"
    ]
  },
  "UiModelProvider Test Template": {
    "prefix": "uimodelprovider-test",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:hooks_riverpod/hooks_riverpod.dart';",
      "",
      "void main() {",
      "  group('${1:Name}UiModelProvider', () {",
      "    late ProviderContainer container;",
      "",
      "    setUp(() {",
      "      container = ProviderContainer();",
      "    });",
      "",
      "    tearDown(() {",
      "      container.dispose();",
      "    });",
      "",
      "    test('テスト内容', () {",
      "    });",
      "  });",
      "}"
    ]
  },
  "EventHandler Test Template": {
    "prefix": "eventhandler-test",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:mockito/annotations.dart';",
      "import 'package:mockito/mockito.dart';",
      "",
      "import '${1:Name}_event_handler_test.mocks.dart';",
      "",
      "@GenerateMocks([${2:Name}UiModelNotifier])",
      "void main() {",
      "  group('${2:Name}EventHandler', () {",
      "    late Mock${2:Name}UiModelNotifier mockUiModelNotifier;",
      "    late ${2:Name}EventHandler eventHandler;",
      "",
      "    setUp(() {",
      "      mockUiModelNotifier = Mock${2:Name}UiModelNotifier();",
      "      eventHandler = ${2:Name}EventHandler(",
      "        mockUiModelNotifier,",
      "      );",
      "    });",
      "",
      "    test('テスト内容', () async {",
      "    });",
      "  });",
      "}"
    ]
  }
}